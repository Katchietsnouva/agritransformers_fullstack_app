import "package:flutter/material.dart";
import 'package:firebase_storage/firebase_storage.dart';


class HomePostsPage extends StatefulWidget {
  const HomePostsPage({super.key});

  @override
  State<HomePostsPage> createState() => _HomePostsPageState();
}

class _HomePostsPageState extends State<HomePostsPage> {

  late Future<List<FileData>> imageFilesData;
  // Firebase Storage reference for the logo image

  final Reference logoImageRef =
      FirebaseStorage.instance.ref('assets/Agri-Transformers.png');

  late Future<String> logoImageUrl;

  @override
  void initState() {
    super.initState();
    imageFilesData = listFilesData();
    logoImageUrl = getLogoImageUrl();
  }

  Future<List<FileData>> listFilesData() async {
    final ListResult result = await FirebaseStorage.instance.ref().listAll();
    final List<FileData> filesData = [];

    for (final Reference ref in result.items) {
      final String downloadURL = await ref.getDownloadURL();
      final String fileName = ref.name;
      filesData.add(FileData(fileName, downloadURL));
    }
    return filesData;
  }

  Future<String> getLogoImageUrl() async {
    try {
      final downloadURL = await logoImageRef.getDownloadURL();
      return downloadURL;
    } catch (e) {
      // Handle any errors that may occur when getting the download URL
      print('Error loading logo image: $e');
      return ''; // Return an empty URL or a default image URL
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        // My APp logo
        // title: Image.asset(
        //   'images/ig_name.png',
        //   height: 50,
        toolbarHeight: 50, // Set the height of the AppBar
        title: FutureBuilder<String>(
          future: logoImageUrl,
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return CircularProgressIndicator(); // Show a loading indicator while the URL is fetched
            } else if (snapshot.hasError || !snapshot.hasData) {
              return Text(
                  "App Logo"); // Show a default logo if there's an error
            }
            return Image.network(snapshot.data!); // Load the logo from the URL
          },
        ),

        actions: [
          IconButton(
            icon: const Icon(Icons.add_circle_outline),
            onPressed: () {},
          ),
          IconButton(
            icon: const Icon(Icons.favorite_border),
            onPressed: () {},
          ),
          IconButton(
            icon: const Icon(Icons.chat_bubble_outline),
            onPressed: () {},
          ),
        ],
      ),
      body: FutureBuilder<List<FileData>>(
        future: imageFilesData,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return const Text("Something went wrong");
          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return const Text("No images found.");
          }

          return ListView.builder(
            itemCount: snapshot.data!.length,
            itemBuilder: (context, index) {
              // return Image.network(snapshot.data![index]);
              final FileData fileData = snapshot.data![index];
              return Column(
                children: [
                  Text(fileData.fileName),
                  Container(
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.black, width: 1.0),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.grey.withOpacity(0.5),
                          spreadRadius: 5.0,
                          blurRadius: 5.0,
                          offset: Offset(0.0, 5.0),
                        ),
                      ],
                    ),
                    child: Image.network(
                      fileData.downloadURL,
                      width: 200,
                      height: 200,
                      fit: BoxFit.cover,
                    ),
                  ),
                  const SizedBox(height: 20),
                ],
              );
            },
          );
        },
      ),
    );
  }
}

class FileData {
  final String fileName;
  final String downloadURL;

  FileData(this.fileName, this.downloadURL);
}
